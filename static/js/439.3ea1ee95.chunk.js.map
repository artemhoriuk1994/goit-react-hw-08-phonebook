{"version":3,"file":"static/js/439.3ea1ee95.chunk.js","mappings":"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","sources":["redux/contacts/selectors.jsx","components/ContactsForm/ContactsForm.jsx","components/Filter/Filter.jsx","components/ContactsItem/ContactsItem.jsx","components/ContactsList/ContactsList.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.contacts.filter;","import { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as yup from \"yup\";\nimport styled from \"@emotion/styled\";\nimport { Box } from \"../box\";\nimport { Btn } from \"../Button/Button\"\nimport { useDispatch } from \"react-redux\";\nimport { addContact } from \"redux/contacts/operations\";\n\nconst FormStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: ${p => p.theme.space[4]}px;\n  margin-top: ${p => p.theme.space[4]}px;\n`\nconst ErrorStyled = styled(ErrorMessage)`\n  color: ${p => p.theme.colors.redAccent};\n`\nconst Input = styled(Field)`\n  margin-top: ${p => p.theme.space[2]}px;\n  padding: ${p => p.theme.space[3]}px;\n  font-size: ${p => p.theme.fontSizes.s};\n  border: ${p => p.theme.borders.none};\n  outline: none;\n  border-radius: ${p => p.theme.radii.sm};\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n  transition: box-shadow 300ms linear;\n\n:hover,\n:focus{\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n}\n`\nconst schema = yup.object().shape({\n  name: yup.string().matches(\"[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\", { message: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\" }).required(),\n  number: yup.string().required(),\n});\n\nexport const ContactsForm = () => {\n  const dispatch = useDispatch();\n  const handleFormSubmit = values => {\n    dispatch(addContact(values));\n  };\n  return (\n    <Formik\n      initialValues={{ name: \"\", number: \"\" }}\n      validationSchema={schema}\n      onSubmit={(values, { resetForm }) => {\n        handleFormSubmit(values);\n        resetForm();\n      }}\n    >\n      <FormStyled>\n        <Box as=\"label\" display=\"flex\" flexDirection=\"column\">\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter name\"\n          />\n          <ErrorStyled name=\"name\" component=\"p\" />\n        </Box>\n        <Box as=\"label\" display=\"flex\" flexDirection=\"column\">\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Enter number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n          <ErrorStyled name=\"number\" component=\"p\" />\n        </Box>\n        <Btn type=\"submit\" name=\"addContact\">\n          Add contact\n        </Btn>\n      </FormStyled>\n    </Formik>\n  );\n};","import { useSelector, useDispatch } from \"react-redux\";\nimport { Formik, Form, Field } from \"formik\";\nimport { filterContacts } from \"redux/contacts/contactsSlice\";\nimport { selectFilter } from \"redux/contacts/selectors\";\nimport { Box } from \"../box\";\nimport styled from \"@emotion/styled\";\n\nconst SearchForm = styled(Form)`\n  margin: ${p => p.theme.space[4]}px 0;\n`\nconst Input = styled(Field)`\n  margin-top: ${p => p.theme.space[2]}px;\n  padding: ${p => p.theme.space[3]}px;\n  font-size: 16px;\n  border: ${p => p.theme.borders.none};\n  outline: none;\n  border-radius: ${p => p.theme.radii.sm};\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n  transition: box-shadow 300ms linear;\n\n:hover,\n:focus{\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n}\n`\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <Formik initialValues={{ filter: filter }}>\n      <SearchForm>\n        <Box as=\"label\" display=\"flex\" flexDirection=\"column\">\n          Find contacts by name\n          <Input\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={e => { dispatch(filterContacts(e.target.value)) }}\n            placeholder=\"Search name\"\n          />\n        </Box>\n      </SearchForm>\n    </Formik>\n  );\n};","import PropTypes from \"prop-types\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"redux/contacts/operations\";\nimport { Btn } from \"../Button/Button\"\nimport { Box } from \"../box\";\nimport styled from \"@emotion/styled\";\n\nconst Contact = styled.p`\n  display: flex;\n  flex-direction: column;\n`\n\nexport const ContactsItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  return (\n    <Box as=\"div\" display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Contact><span>{contact.name}:</span><span>{contact.number}</span></Contact>\n      <Btn\n        name=\"deleteBtn\"\n        onClick={() => dispatch(deleteContact(contact.id))}\n      >\n        Delete\n      </Btn>\n    </Box>\n  );\n};\n\nContactsItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};","import { useSelector } from \"react-redux\";\nimport { Box } from \"../box\";\nimport { selectContacts, selectFilter } from \"redux/contacts/selectors\";\nimport { ContactsItem } from \"../ContactsItem/ContactsItem\";\n\nexport const ContactsList = () => {\n  const filterValue = useSelector(selectFilter);\n  const contacts = useSelector(selectContacts);\n  const normalizeFilter = filterValue && filterValue.toLowerCase();\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizeFilter)\n  );\n\n  return (\n    <Box as=\"ul\" display=\"flex\" flexDirection=\"column\" gridGap={4}>\n      {visibleContacts.map(contact => {\n        return (\n          <li key={contact.id}>\n            <ContactsItem contact={contact}/>\n          </li>\n        );\n      })}\n    </Box>\n  );\n};","import styled from \"@emotion/styled\";\n\nexport const Section = styled.section`\n  padding: ${p => p.theme.space[4]}px 0;\n`\nexport const Container = styled.div`\n  width: 312px;\n  margin: 0 auto;\n  padding: ${p => p.theme.space[4]}px;\n  border-radius: ${p => p.theme.radii.sm};\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.16), 0 1px 2px rgba(0, 0, 0, 0.23);\n`\nexport const H2 = styled.h2`\n  font-size: ${p => p.theme.fontSizes.m};\n  color: ${p => p.theme.colors.primary};\n`\nexport const InfoMessage = styled.p`\n  display: flex;\n  align-items: center;\n  gap: ${p => p.theme.space[2]}px;\n  font-size: ${p => p.theme.fontSizes.s};\n`","import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectIsLoading, selectContacts } from 'redux/contacts/selectors';\nimport { ContactsForm } from 'components/ContactsForm/ContactsForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Section, Container, H2, InfoMessage } from \"./Contacts.styled\";\nimport { BiInfoCircle } from \"react-icons/bi\";\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <Section>\n        <Container>\n          <H2>Phonebook</H2>\n          <ContactsForm />\n        </Container>\n      </Section>\n      <Section>\n        <Container>\n          {isLoading && <b>Waiting for response...</b>}\n          <H2>Contacts</H2>\n          <Filter />\n          {contacts.length > 0\n            ? <ContactsList/>\n            : (<InfoMessage><BiInfoCircle />There are no contacts yet</InfoMessage>)\n          }\n        </Container>  \n      </Section>\n    </main>\n  );\n}"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilter","filter","FormStyled","styled","Form","p","theme","space","ErrorStyled","ErrorMessage","colors","redAccent","Input","Field","fontSizes","s","borders","none","radii","sm","schema","yup","shape","name","matches","message","required","number","ContactsForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","addContact","handleFormSubmit","as","display","flexDirection","type","placeholder","component","pattern","title","SearchForm","Filter","useSelector","value","onChange","e","filterContacts","target","Contact","ContactsItem","contact","justifyContent","alignItems","onClick","deleteContact","id","ContactsList","filterValue","normalizeFilter","toLowerCase","visibleContacts","includes","gridGap","map","Section","Container","H2","m","primary","InfoMessage","Contacts","useEffect","fetchContacts","length"],"sourceRoot":""}